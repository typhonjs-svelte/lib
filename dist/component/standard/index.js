import { SvelteComponent, init, safe_not_equal, append_styles, create_slot, element, svg_element, space, text, attr, set_style, insert, append, listen, action_destroyer, set_data, update_slot_base, get_all_dirty_from_scope, get_slot_changes, is_function, transition_in, transition_out, detach, run_all, subscribe, noop } from 'svelte/internal';
import { writable } from 'svelte/store';
import { toggleDetails, applyStyles } from '@typhonjs-svelte/lib/action';

/* src\component\standard\TJSFolder.svelte generated by Svelte v3.44.3 */

function add_css(target) {
	append_styles(target, "svelte-1rj8kf1", "details.svelte-1rj8kf1.svelte-1rj8kf1{margin-left:-5px;padding-left:5px}summary.svelte-1rj8kf1.svelte-1rj8kf1{display:flex;position:relative;align-items:center;background:var(--summary-background, none);border:var(--summary-border, none);font-size:var(--summary-font-size, inherit);font-weight:var(--summary-font-weight, bold);list-style:none;margin:0 0 0 -5px;padding:var(--summary-padding, 4px) 0;user-select:none;width:var(--summary-width, fit-content)}summary.svelte-1rj8kf1 svg.svelte-1rj8kf1{width:var(--summary-chevron-size, var(--summary-font-size, 15px));height:var(--summary-chevron-size, var(--summary-font-size, 15px));color:var(--summary-chevron-color, currentColor);opacity:var(--summary-chevron-opacity, 0.2);margin:0 5px 0 0;transition:opacity 0.2s, transform 0.1s;transform:rotate(var(--summary-chevron-rotate-closed, -90deg))}summary.svelte-1rj8kf1:hover svg.svelte-1rj8kf1{opacity:var(--summary-chevron-opacity-hover, 1)}[open].svelte-1rj8kf1>summary svg.svelte-1rj8kf1{transform:rotate(var(--summary-chevron-rotate-open, 0))}.contents.svelte-1rj8kf1.svelte-1rj8kf1{position:relative;background:var(--contents-background, none);border:var(--contents-border, none);margin:var(--contents-margin, 0 5px 0 -5px);padding:var(--contents-padding, 0 0 0 calc(var(--summary-font-size, 13px) * 0.8))}.contents.svelte-1rj8kf1.svelte-1rj8kf1::before{content:'';position:absolute;width:0;height:calc(100% + 8px);left:0;top:-8px}summary.svelte-1rj8kf1:focus-visible+.contents.svelte-1rj8kf1::before{height:100%;top:0}");
}

function create_fragment(ctx) {
	let details;
	let summary;
	let svg;
	let path;
	let t0;
	let t1;
	let t2;
	let div;
	let toggleDetails_action;
	let applyStyles_action;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

	return {
		c() {
			details = element("details");
			summary = element("summary");
			svg = svg_element("svg");
			path = svg_element("path");
			t0 = space();
			t1 = text(/*name*/ ctx[1]);
			t2 = space();
			div = element("div");
			if (default_slot) default_slot.c();
			attr(path, "fill", "currentColor");
			attr(path, "stroke", "currentColor");
			set_style(path, "stroke-linejoin", "round");
			set_style(path, "stroke-width", "3");
			attr(path, "d", "M5,8L19,8L12,15Z");
			attr(svg, "viewBox", "0 0 24 24");
			attr(svg, "class", "svelte-1rj8kf1");
			attr(summary, "class", "svelte-1rj8kf1");
			attr(div, "class", "contents svelte-1rj8kf1");
			attr(details, "class", "svelte-1rj8kf1");
		},
		m(target, anchor) {
			insert(target, details, anchor);
			append(details, summary);
			append(summary, svg);
			append(svg, path);
			append(summary, t0);
			append(summary, t1);
			append(details, t2);
			append(details, div);

			if (default_slot) {
				default_slot.m(div, null);
			}

			details.open = /*$store*/ ctx[3];
			current = true;

			if (!mounted) {
				dispose = [
					listen(details, "toggle", /*details_toggle_handler*/ ctx[7]),
					action_destroyer(toggleDetails_action = toggleDetails.call(null, details, /*store*/ ctx[2])),
					action_destroyer(applyStyles_action = applyStyles.call(null, details, /*styles*/ ctx[0]))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*name*/ 2) set_data(t1, /*name*/ ctx[1]);

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[5],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
						null
					);
				}
			}

			if (dirty & /*$store*/ 8) {
				details.open = /*$store*/ ctx[3];
			}

			if (toggleDetails_action && is_function(toggleDetails_action.update) && dirty & /*store*/ 4) toggleDetails_action.update.call(null, /*store*/ ctx[2]);
			if (applyStyles_action && is_function(applyStyles_action.update) && dirty & /*styles*/ 1) applyStyles_action.update.call(null, /*styles*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(details);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $store,
		$$unsubscribe_store = noop,
		$$subscribe_store = () => ($$unsubscribe_store(), $$unsubscribe_store = subscribe(store, $$value => $$invalidate(3, $store = $$value)), store);

	$$self.$$.on_destroy.push(() => $$unsubscribe_store());
	let { $$slots: slots = {}, $$scope } = $$props;
	let { styles } = $$props;
	let { folder } = $$props;
	let { name = folder ? folder.name : '' } = $$props;
	let { store = folder ? folder.store : writable(false) } = $$props;
	$$subscribe_store();

	function details_toggle_handler() {
		$store = this.open;
		store.set($store);
	}

	$$self.$$set = $$props => {
		if ('styles' in $$props) $$invalidate(0, styles = $$props.styles);
		if ('folder' in $$props) $$invalidate(4, folder = $$props.folder);
		if ('name' in $$props) $$invalidate(1, name = $$props.name);
		if ('store' in $$props) $$subscribe_store($$invalidate(2, store = $$props.store));
		if ('$$scope' in $$props) $$invalidate(5, $$scope = $$props.$$scope);
	};

	return [styles, name, store, $store, folder, $$scope, slots, details_toggle_handler];
}

class TJSFolder extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { styles: 0, folder: 4, name: 1, store: 2 }, add_css);
	}
}

export { TJSFolder };
//# sourceMappingURL=index.js.map
