{"version":3,"file":"index.js","sources":["../../../src/component/standard/TJSFolder.svelte","../../../src/component/standard/TJSStyleProperties.svelte"],"sourcesContent":["<script>\r\n   /**\r\n    * TJSFolder provides a collapsible folder using the details and summary HTMLElements.\r\n    *\r\n    * This is a slotted component.\r\n    *\r\n    * ----------------------------------------------------------------------------------------------------------------\r\n    * Exported props include:\r\n    * `folder`: An object containing id (any), name (string), store (writable boolean)\r\n    *\r\n    * Or in lieu of passing the folder object you can assign these props directly:\r\n    * `id`: Anything used for an ID.\r\n    * `name`: The name of the folder; string.\r\n    * `store`: The store tracking the open / close state: writable<boolean>\r\n    *\r\n    * The final prop is `styles` which follows the `applyStyles` action; see `applyStyles` or `StylesProperties`\r\n    * component for more information. This is an object that applies inline styles.\r\n    *\r\n    * ----------------------------------------------------------------------------------------------------------------\r\n    * Events: There are several events that are fired and / or bubbled up through parents. There are four\r\n    * custom events that pass a details object including: `the details element, id, name, and store`.\r\n    *\r\n    * The following events are bubbled up such that assigning a listener in any parent component receives them\r\n    * from all children folders:\r\n    * `click` - Basic MouseEvent of folder being clicked.\r\n    * `closeAny` - Triggered when any child folder is closed w/ details object.\r\n    * `openAny` - Triggered when any child folder is opened w/ details object.\r\n    *\r\n    * The following events do not propagate / bubble up and can be registered with:\r\n    * `close` - Triggered when direct descendent folder is closed w/ details object.\r\n    * `open` - Triggered when direct descendent folder is opened w/ details object.\r\n    *\r\n    * ----------------------------------------------------------------------------------------------------------------\r\n    * Styling: To style this component use `details.tjs-folder` as a selector.\r\n    *\r\n    * There are several local CSS variables that you can use to change the appearance dynamically. Either use\r\n    * CSS props or pass in a `styles` object w/ key / value props to set to the details. Another alternative is using\r\n    * `StyleProperties` component which wraps a section in locally defined CSS variables. Useful for a large group of\r\n    * folders where the goal is changing the appearance of all of them as a group.\r\n    *\r\n    * The following CSS variables are supported, but not defined by default.\r\n    *\r\n    * Details element (attributes follow `--tjs-details-`):\r\n    * --tjs-details-padding-left: 5px; set for children to indent more;\r\n    *\r\n    * Summary element (attributes follow `--tjs-summary-`):\r\n    * --tjs-summary-background-blend-mode: initial\r\n    * --tjs-summary-background: none\r\n    * --tjs-summary-border: none\r\n    * --tjs-summary-cursor: pointer\r\n    * --tjs-summary-font-size: inherit\r\n    * --tjs-summary-font-weight: bold\r\n    * --tjs-summary-padding: 4px\r\n    * --tjs-summary-width: fit-content; wraps content initially, set to 100% or other width measurement\r\n    *\r\n    * Summary SVG / chevron element (attributes follow `--tjs-summary-chevron-`):\r\n    *\r\n    * The width and height use multiple fallback variables before setting a default of 15px. You can provide\r\n    * `--tjs-summary-chevron-size`. If not provided then the chevron dimensions are set by `--tjs-summary-font-size`.\r\n    *\r\n    * --tjs-summary-chevron-color: currentColor\r\n    * --tjs-summary-chevron-opacity: 0.2; Opacity when not hovering.\r\n    * --tjs-summary-chevron-rotate-closed: -90deg; rotation angle when closed.\r\n    * --tjs-summary-chevron-opacity-hover: 1; Opacity when hovering.\r\n    * --tjs-summary-chevron-rotate-open: 0; rotation angle when open.\r\n    *\r\n    * Contents element (attributes follow `--tjs-contents-`):\r\n    * --tjs-contents-background-blend-mode: initial\r\n    * --tjs-contents-background: none\r\n    * --tjs-contents-border: none\r\n    * --tjs-contents-margin: 0 0 0 -5px\r\n    *\r\n    * Padding is set directly by `--tjs-contents-padding` or follows the following calculation:\r\n    * `0 0 0 calc(var(--tjs-summary-font-size, 13px) * 0.8)`\r\n    *\r\n    * If neither `--tjs-contents-padding` or `--tjs-summary-font-size` is defined the default is `13px * 0.8`.\r\n    */\r\n\r\n   import { onDestroy } from 'svelte';\r\n\r\n   import { writable }  from 'svelte/store';\r\n\r\n   import {\r\n      applyStyles,\r\n      toggleDetails }   from '@typhonjs-svelte/lib/action';\r\n\r\n   export let styles;\r\n\r\n   export let folder;\r\n   export let id = folder ? folder.id : void 0;\r\n   export let name = folder ? folder.name : '';\r\n   export let store = folder ? folder.store : writable(false);\r\n\r\n   let detailsEl;\r\n\r\n   /**\r\n    * Create a CustomEvent with details object containing relevant element and props.\r\n    *\r\n    * @param {string}   type - Event name / type.\r\n    *\r\n    * @param {boolean}  [bubbles=false] - Does the event bubble.\r\n    *\r\n    * @returns {CustomEvent<object>}\r\n    */\r\n   function createEvent(type, bubbles = false)\r\n   {\r\n      return new CustomEvent(type, {\r\n         detail: { element: detailsEl, folder, id, name, store },\r\n         bubbles\r\n      });\r\n   }\r\n\r\n   // Manually subscribe to store in order to trigger only on changes; avoids initial dispatch on mount.\r\n   // Directly dispatch custom events as Svelte 3 does not support bubbling of custom events by `createEventDispatcher`.\r\n   const unsubscribe = store.subscribe((value) =>\r\n   {\r\n      if (detailsEl)\r\n      {\r\n         detailsEl.dispatchEvent(createEvent(value ? 'open' : 'close'));\r\n         detailsEl.dispatchEvent(createEvent(value ? 'openAny' : 'closeAny', true));\r\n      }\r\n   });\r\n\r\n   onDestroy(unsubscribe);\r\n</script>\r\n\r\n<details class=tjs-folder\r\n         bind:this={detailsEl}\r\n         bind:open={$store}\r\n         on:click\r\n         on:open\r\n         on:close\r\n         on:openAny\r\n         on:closeAny\r\n         use:toggleDetails={store}\r\n         use:applyStyles={styles}>\r\n    <summary>\r\n        <svg viewBox=\"0 0 24 24\">\r\n            <path\r\n                fill=currentColor\r\n                stroke=currentColor\r\n                style=\"stroke-linejoin: round; stroke-width: 3;\"\r\n                d=\"M5,8L19,8L12,15Z\"\r\n            />\r\n        </svg>\r\n\r\n        {name}\r\n    </summary>\r\n\r\n    <div class=contents>\r\n        <slot></slot>\r\n    </div>\r\n</details>\r\n\r\n<style>\r\n    details {\r\n        margin-left: -5px;\r\n        padding-left: var(--tjs-details-padding-left, 5px); /* Set for children folders to increase indent */\r\n    }\r\n\r\n    summary {\r\n        display: flex;\r\n        position: relative;\r\n        align-items: center;\r\n        background-blend-mode: var(--tjs-summary-background-blend-mode, initial);\r\n        background: var(--tjs-summary-background, none);\r\n        border: var(--tjs-summary-border, none);\r\n        cursor: var(--tjs-summary-cursor, pointer);\r\n        font-size: var(--tjs-summary-font-size, inherit);\r\n        font-weight: var(--tjs-summary-font-weight, bold);\r\n        list-style: none;\r\n        margin: 0 0 0 -5px;\r\n        padding: var(--tjs-summary-padding, 4px) 0;\r\n        user-select: none;\r\n        width: var(--tjs-summary-width, fit-content);\r\n    }\r\n\r\n    summary svg {\r\n        width: var(--tjs-summary-chevron-size, var(--tjs-summary-font-size, 15px));\r\n        height: var(--tjs-summary-chevron-size, var(--tjs-summary-font-size, 15px));\r\n        color: var(--tjs-summary-chevron-color, currentColor);\r\n        opacity: var(--tjs-summary-chevron-opacity, 0.2);\r\n        margin: 0 5px 0 0;\r\n        transition: opacity 0.2s, transform 0.1s;\r\n        transform: rotate(var(--tjs-summary-chevron-rotate-closed, -90deg));\r\n    }\r\n\r\n    summary:hover svg {\r\n        opacity: var(--tjs-summary-chevron-opacity-hover, 1);\r\n    }\r\n\r\n    [open] > summary svg {\r\n        transform: rotate(var(--tjs-summary-chevron-rotate-open, 0));\r\n    }\r\n\r\n    .contents {\r\n        position: relative;\r\n        background-blend-mode: var(--tjs-contents-background-blend-mode, initial);\r\n        background: var(--tjs-contents-background, none);\r\n        border: var(--tjs-contents-border, none);\r\n        margin: var(--tjs-contents-margin, 0 0 0 -5px);\r\n        padding: var(--tjs-contents-padding, 0 0 0 calc(var(--tjs-summary-font-size, 13px) * 0.8));\r\n    }\r\n\r\n    .contents::before {\r\n        content: '';\r\n        position: absolute;\r\n        width: 0;\r\n        height: calc(100% + 8px);\r\n        left: 0;\r\n        top: -8px;\r\n    }\r\n\r\n    summary:focus-visible + .contents::before {\r\n        height: 100%;\r\n        top: 0;\r\n    }\r\n</style>\r\n","<script>\r\n   /**\r\n    * StylesProperties is a slotted component that simply wraps the slot in a DIV element and uses `applyStyles` to\r\n    * load the prop `styles` into inline styles. `styles` is an object with `property / value` pairs.\r\n    *\r\n    * This is useful if you need to set local CSS variables for a group of children components for instance rather than\r\n    * direct CSS props.\r\n    */\r\n\r\n   import { applyStyles } from '@typhonjs-svelte/lib/action';\r\n\r\n   export let styles;\r\n</script>\r\n\r\n<div use:applyStyles={styles}>\r\n    <slot/>\r\n</div>\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sBAkJS,GAAI;;;;;;;;;;;;;;;;GApBb,MA0BU;GAhBN,MAWU;GAVN,MAOM;GANF,MAKE;;;;GAMV,MAEM;;;;;;;6BAvBU,GAAM;;;;;;;;;;;yFAME,GAAK;sFACP,GAAM;;;;;;;6DAWvB,GAAI;;;;;;;;;;;;;;;;;;8BAlBO,GAAM;;;iJAME,GAAK;6IACP,GAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAjDlB,MAAM;OAEN,MAAM;OACN,EAAE,GAAG,MAAM,GAAG,MAAM,CAAC,EAAE,QAAQ,CAAC;OAChC,IAAI,GAAG,MAAM,GAAG,MAAM,CAAC,IAAI,GAAG,EAAE;OAChC,KAAK,GAAG,MAAM,GAAG,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK;;KAErD,SAAS;;;;;;;;;;;UAWJ,WAAW,CAAC,IAAI,EAAE,OAAO,GAAG,KAAK;aAE5B,WAAW,CAAC,IAAI;;IACxB,MAAM;KAAI,OAAO,EAAE,SAAS;KAAE,MAAM;KAAE,EAAE;KAAE,IAAI;KAAE,KAAK;;IACrD,OAAO;;;;;;OAMP,WAAW,GAAG,KAAK,CAAC,SAAS,CAAE,KAAK;MAEnC,SAAS;GAEV,SAAS,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,GAAG,MAAM,GAAG,OAAO;GAC5D,SAAS,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,GAAG,SAAS,GAAG,UAAU,EAAE,IAAI;;;;CAI9E,SAAS,CAAC,WAAW;;;;;;;;;;;;;;;;;;;;;;;;GAIJ,SAAS;;;;;;EACT,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GClH1B,MAEM;;;;;;;;;2FAFgB,GAAM;;;;;;;;;;;;;;;;;;;;6IAAN,GAAM;;;;;;;;;;;;;;;;;;;;;;OAHd,MAAM;;;;;;;;;;;;;;;;;;;"}