{"version":3,"file":"index.js","sources":["../../../../src/store/storage/web/TJSWebStorage.js","../../../../src/store/storage/web/TJSLocalStorage.js","../../../../src/store/storage/web/TJSSessionStorage.js"],"sourcesContent":["export class TJSWebStorage\r\n{\r\n   /** @type {Storage} */\r\n   #storage;\r\n\r\n   /** @type {(value: any) => string} */\r\n   #serialize;\r\n\r\n   /** @type {(value: string) => any} */\r\n   #deserialize;\r\n\r\n   /** @type {import('#runtime/svelte/store/web-storage').StorageWritable} */\r\n   #writable;\r\n\r\n   /**\r\n    * @type {Map<string, import('#svelte/store').Writable>}\r\n    */\r\n   #stores = new Map();\r\n\r\n   /**\r\n    * @param {object} options - Options.\r\n    *\r\n    * @param {Storage}  options.storage -\r\n    *\r\n    * @param {import('#runtime/svelte/store/web-storage').StorageWritable} options.writable -\r\n    *\r\n    * @param {(value: any) => string}  options.serialize -\r\n    *\r\n    * @param {(value: string) => any}  options.deserialize -\r\n    */\r\n   constructor({ storage, writable, serialize, deserialize })\r\n   {\r\n      this.#storage = storage;\r\n      this.#writable = writable;\r\n      this.#serialize = serialize;\r\n      this.#deserialize = deserialize;\r\n   }\r\n\r\n   /**\r\n    * Creates a new store for the given key.\r\n    *\r\n    * @param {string}   key - Key to lookup in stores map.\r\n    *\r\n    * @param {boolean}  [defaultValue] - A default value to set for the store.\r\n    *\r\n    * @returns {import('#svelte/store').Writable} The new store.\r\n    */\r\n   #createStore(key, defaultValue = void 0)\r\n   {\r\n      try\r\n      {\r\n         const value = this.#storage.getItem(key);\r\n         if (value !== null) { defaultValue = this.#deserialize(value); }\r\n      }\r\n      catch (err) { /**/ }\r\n\r\n      return this.#writable(key, defaultValue);\r\n   }\r\n\r\n   /**\r\n    * Gets a store from the `stores` Map or creates a new store for the key and a given default value.\r\n    *\r\n    * @param {string}               key - Key to lookup in stores map.\r\n    *\r\n    * @param {boolean}              [defaultValue] - A default value to set for the store.\r\n    *\r\n    * @returns {import('#svelte/store').Writable} The store for the given key.\r\n    */\r\n   #getStore(key, defaultValue = void 0)\r\n   {\r\n      let store = this.#stores.get(key);\r\n      if (store === void 0)\r\n      {\r\n         store = this.#createStore(key, defaultValue);\r\n         this.#stores.set(key, store);\r\n      }\r\n\r\n      return store;\r\n   }\r\n\r\n   /**\r\n    * Get value from the storage API.\r\n    *\r\n    * @param {string}   key - Key to lookup in storage API.\r\n    *\r\n    * @param {*}        [defaultValue] - A default value to return if key not present in session storage.\r\n    *\r\n    * @returns {*} Value from session storage or if not defined any default value provided.\r\n    */\r\n   getItem(key, defaultValue)\r\n   {\r\n      let value = defaultValue;\r\n\r\n      const storageValue = this.#storage.getItem(key);\r\n\r\n      if (storageValue !== null)\r\n      {\r\n         try\r\n         {\r\n            value = this.#deserialize(storageValue);\r\n         }\r\n         catch (err)\r\n         {\r\n            value = defaultValue;\r\n         }\r\n      }\r\n      else if (defaultValue !== void 0)\r\n      {\r\n         try\r\n         {\r\n            const newValue = this.#serialize(defaultValue);\r\n\r\n            // If there is no existing storage value and defaultValue is defined the storage value needs to be set.\r\n            this.#storage.setItem(key, newValue);\r\n         }\r\n         catch (err) { /* */ }\r\n      }\r\n\r\n      return value;\r\n   }\r\n\r\n   /**\r\n    * Returns the backing Svelte store for the given key; potentially sets a default value if the key\r\n    * is not already set.\r\n    *\r\n    * @param {string}   key - Key to lookup in storage API.\r\n    *\r\n    * @param {*}        [defaultValue] - A default value to return if key not present in session storage.\r\n    *\r\n    * @returns {import('#svelte/store').Writable} The Svelte store for this key.\r\n    */\r\n   getStore(key, defaultValue)\r\n   {\r\n      return this.#getStore(key, defaultValue);\r\n   }\r\n\r\n   /**\r\n    * Sets the value for the given key in storage API.\r\n    *\r\n    * @param {string}   key - Key to lookup in storage API.\r\n    *\r\n    * @param {*}        value - A value to set for this key.\r\n    */\r\n   setItem(key, value)\r\n   {\r\n      const store = this.#getStore(key);\r\n      store.set(value);\r\n   }\r\n\r\n   /**\r\n    * Convenience method to swap a boolean value stored in storage API.\r\n    *\r\n    * @param {string}   key - Key to lookup in storage API.\r\n    *\r\n    * @param {boolean}  [defaultValue] - A default value to return if key not present in session storage.\r\n    *\r\n    * @returns {boolean} The boolean swap for the given key.\r\n    */\r\n   swapItemBoolean(key, defaultValue)\r\n   {\r\n      const store = this.#getStore(key, defaultValue);\r\n\r\n      let currentValue = false;\r\n\r\n      try\r\n      {\r\n         currentValue = !!this.#deserialize(this.#storage.getItem(key));\r\n      }\r\n      catch (err) { /**/ }\r\n\r\n      const newValue = typeof currentValue === 'boolean' ? !currentValue : false;\r\n\r\n      store.set(newValue);\r\n      return newValue;\r\n   }\r\n}\r\n","import { localStores }  from '#runtime/svelte/store/web-storage';\r\n\r\nimport { TJSWebStorage }  from './TJSWebStorage.js';\r\n\r\nexport class TJSLocalStorage extends TJSWebStorage\r\n{\r\n   constructor()\r\n   {\r\n      super({\r\n         storage: globalThis?.localStorage,\r\n         writable: localStores.writable,\r\n         serialize: JSON.stringify,\r\n         deserialize: JSON.parse\r\n      });\r\n   }\r\n}\r\n","import { sessionStores }  from '#runtime/svelte/store/web-storage';\r\n\r\nimport { TJSWebStorage }  from './TJSWebStorage.js';\r\n\r\nexport class TJSSessionStorage extends TJSWebStorage\r\n{\r\n   constructor()\r\n   {\r\n      super({\r\n         storage: globalThis?.sessionStorage,\r\n         writable: sessionStores.writable,\r\n         serialize: JSON.stringify,\r\n         deserialize: JSON.parse\r\n      });\r\n   }\r\n}\r\n"],"names":[],"mappings":"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"}